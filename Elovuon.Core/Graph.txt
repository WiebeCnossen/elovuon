namespace Elovuon

type Graph<'n when 'n : comparison> = ('n * ('n list)) list   // 'n list = direct connections
type Forest<'n when 'n : comparison> = ('n * ('n list)) list  // 'n list = ancestors 
type Node<'n when 'n : comparison> =
  | Path of 'n list
  | Forest of Forest<'n> * 'n list
  | Nothing

module List =
  let rec skipWhile f = function [] -> [] | h::t as l -> if f h then skipWhile f t else l
  let takeWhile f =
    let rec inner a =
      function h::t when f h -> inner (h::a) t | _ -> List.rev a
    inner []

module Graph =
  let edge v w = if v < w then v, w else w, v
  let (|Opposing|) vertex = function opposing, v | v, opposing when v = vertex -> Some opposing | _ -> None
  let nodeEdges (v, l) = l |> List.map (edge v)
  let graphNodes graph = graph |> List.map fst
  let graphEdges graph = graph |> List.collect (fun (v, l) -> l |> List.filter ((<) v) |> List.map (edge v))
  let edgeInGraph graph (v, w) =
    let rec inner =
      function
      | [] -> false
      | (x, l)::_ when x = v -> l |> List.exists ((=) w)
      | (x, l)::_ when x = w -> l |> List.exists ((=) v)
      | _::t -> inner t
    inner graph
  let fromEdges edges =
    edges
    |> Seq.collect (fun (v, w) -> [ v, w; w, v ])
    |> Seq.groupBy fst
    |> List.ofSeq
    |> List.map (fun (key, s) -> key, Seq.distinct s |> List.ofSeq |> List.map snd)
  let cutNodes vl graph =
    let vs = set vl
    graph
    |> List.choose (fun (v, l) ->
       if vs.Contains v then None
       else Some (v, l |> List.filter (vs.Contains >> not)))

  let rec private getLast = function h::[] -> h | h::t -> getLast t | _ -> failwith "empty list"
  let private tryGetLinked vertex graph = graph |> List.tryPick (fun (v, l) -> if v = vertex then Some l else None)
  let private getLinked vertex = tryGetLinked vertex >> Option.get
  let private getBlossom p1 p2 =
    let p1, p2 = List.rev p1, List.rev p2
    let rec inner l1 l2 =
      match l1, l2 with
      | _::h1::t1, _::h2::t2 when h1 = h2 -> inner (h1::t1) (h2::t2)
      | h1::t1, l2 -> h1, t1 @ l2
      | _ -> failwithf "invalid blossom %A %A" p1 p2
    inner p1 p2
  let private replaceBlossom l r node graph =
    let bs = getBlossom l r |> snd |> set
    let nodeNodes =
      graph
      |> List.choose (fun (v, l) ->
         if bs.Contains v then None
         elif l |> List.exists (fun w -> bs.Contains w) then Some v
         else None)
    let subGraph =
      graph
      |> List.choose (fun (v, l) ->
         if bs.Contains v then None else
         let lf = l |> List.filter (bs.Contains >> not)
         Some (v, if l |> List.exists (fun w -> bs.Contains w) then node :: lf else lf))
    if List.isEmpty nodeNodes then subGraph else (node, nodeNodes) :: subGraph

  let rec private findAugmentingPath<'n when 'n : comparison> (graph:Graph<'n>) matching =
    let rec inner forest =
      function
      | [] -> None
      | v::vertices ->
        let path = getLinked v forest
        let root = getLast path
        if set (List.map fst matching) - set (List.map fst graph) |> Set.isEmpty |> not then
          failwithf "matching out of scope %A %A" graph (graphEdges matching)
        getLinked v graph
        |> List.fold (fun s w ->
           if List.head path = w then s else
           match s with
           | Path path -> Path path
           | Nothing -> Nothing
           | Forest (forest,vertices) ->
             match tryGetLinked w forest with
             | Some l when List.length l % 2 = 0 -> s
             | Some l when getLast l = root ->
               let root, blossom = getBlossom path l
               let dummy =
                 match (typeof<'n>).GetProperty("Zero") with
                 | null -> match 0 :> obj with :? 'n as n -> n | _ -> failwith "wrong type 1"
                 | prop -> match prop.GetValue(null) with :? 'n as n -> n | _ -> failwith "wrong type 2"
               let sg = replaceBlossom l path dummy graph
               let link = match List.skipWhile ((<>) root) l with _::w::t -> Some (edge dummy w) | _ -> None
               let sm =
                 let cut = cutNodes (blossom) matching
                 match link with
                 | Some edge -> edge :: graphEdges cut |> fromEdges
                 | _ -> cut
               //printfn "blossom at %O" root
               //printfn "blossom %A at %O contracted to %O" blossom root dummy
               //printfn "%A %A" l path
               //printfn "%A" graph
               //printfn "%A" sg
               //exit 1
               let expand h v =
                 if v <> dummy then [v] else
                 let w = blossom |> List.find (edge h >> edgeInGraph graph)
                 //printfn "connected %O at %O (%b)" h w (w=root)
                 if w = root then [root] else
                 let i,o = if l |> List.exists ((=) w) then l,path else path,l
                 let rec iedge p =
                   match p with
                   | v::x::t when v = w -> edge v x
                   | h::t -> iedge t
                   | [] -> failwith "iedge error"                       
                 (if iedge i |> edgeInGraph matching then
                    i |> List.skipWhile ((<>) w)
                  else
                    w :: (i |> List.takeWhile ((<>) w) |> List.rev) @ o)
                 |> List.takeWhile (set blossom).Contains
               let rec explode path =
                 match path with
                 | h::d::i::t when d = dummy ->
                   if Option.exists ((=) (edge h d)) link
                   then
                     //printfn "a %A" link
                     h :: (d::i::t |> explode)
                   else
                     //printfn "b %A" link
                     path |> List.collect (expand h)
                 | h::d::t when d = dummy ->
                   //printfn "c"
                   path |> List.collect (expand h)
                 | d::h::t when d = dummy ->
                   //printfn "d"
                   (explode [h;d] |> List.rev) @ t
                 | h::t -> h :: explode t
                 | [] -> []
               match findAugmentingPath sg sm |> Option.map explode with
               | Some path ->
                 if Seq.countBy id path |> Seq.exists (snd >> (<) 1) then failwithf "invalid path: %A" path
                 Path path
               | None -> Nothing
             | Some l -> List.rev l @ getLinked v forest |> Path
             | None ->
               match tryGetLinked w matching with
               | None -> s
               | Some [x] -> Forest ((w, w::path) :: (x, x::w::path) :: forest, x :: vertices)
               | _ -> failwithf "invalid matching %A" matching) (Forest (forest, vertices))
        |> function
           | Path path -> Some path
           | Forest (forest, vertices) -> inner forest vertices
           | Nothing -> None 
       
    let exposed = (graphNodes graph |> set) - (graphNodes matching |> set) |> Set.toList
    let forest = exposed |> List.map (fun v -> v, [v])
    match inner forest exposed with
    | Some m -> Some m
    | None ->
      //printfn "Graph = %A" graph
      //printfn "Matching = %A" (graphEdges matching)
      None

  let private applyPath matching path =
    if List.length path % 2 = 1 then failwithf "Invalid path %A" path
    let matchingEdges, pathEdges = graphEdges matching |> set, Seq.pairwise path |> Seq.map (fun (v,w) -> edge v w) |> set
    let result =
      (matchingEdges - pathEdges) + (pathEdges - matchingEdges)
      |> fromEdges
    match result |> List.tryFind (snd >> List.length >> (<) 1) with
    | Some node -> failwithf "Invalid path %A due to %A" path node
    | _ -> ()
    result

  let rec reduceForMatching graph =
    match graph |> List.tryPick (function v, [w] -> edge v w |> Some | _ -> None) with
    | Some (v, w) -> graph |> cutNodes [v; w] |> reduceForMatching
    | None -> graph

  let initialMatching graph =
    let rec initial nodes edges =
      function
      | [] -> edges
      | (v,e)::t when Set.contains v nodes -> initial nodes edges t
      | (v,e)::t ->
        match e |> List.tryFind (fun w -> Set.contains w nodes |> not) with
        | Some x -> initial (Set.add v nodes |> Set.add x) (edge v x :: edges) t
        | None -> initial nodes edges t

    graph
    |> List.sortBy (snd >> List.length)
    |> initial Set.empty []
    |> fromEdges

  let rec findMaximumMatching graph =
    let rec inner matching =
      if List.length matching / 2 = List.length graph / 2 then matching else
      match findAugmentingPath graph matching with
      | None -> matching
      | Some path -> applyPath matching path |> inner

    match graph |> List.tryPick (function v, [w] -> edge v w |> Some | _ -> None) with
    | Some (v, w) ->
      let sub = graph |> cutNodes [v; w] |> findMaximumMatching
      (v, w) :: graphEdges sub
      |> fromEdges

    | None -> initialMatching graph |> inner

  let rec findPerfectMatching graph =
    let rec inner matching =
      if List.length matching / 2 = List.length graph / 2 then Some matching else
      match findAugmentingPath graph matching with
      | None -> None
      | Some path -> applyPath matching path |> inner

    if graph |> List.exists (snd >> List.isEmpty) then None else
    match graph |> List.tryPick (function v, [w] -> edge v w |> Some | _ -> None) with
    | Some (v, w) ->
      graph
      |> cutNodes [v; w]
      |> findPerfectMatching
      |> Option.map (fun sub -> (v, w) :: graphEdges sub |> fromEdges)

    | None -> initialMatching graph |> inner